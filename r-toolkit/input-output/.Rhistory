#
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
youtubeHighestRatedCommentLikes <- 12000
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
youtubeNumbersInMillions[areGreaterThenOneMillion]
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
View(youtubeNumbers)
View(youtubeNumbers)
youtubeNumbers
youtubeNumbers[areGreaterThenOneMillion]
youtubeNumbersInMillions[areGreaterThenOneMillion]
youtubeNumbers(youtubeNumbersInMillions[areGreaterThenOneMillion])
youtubeNumbers
youtubeNumbers[youtubeNumbers$youtubeNumbersValues[areGreaterThenOneMillion],]
youtubeNumbers[youtubeNumbers$youtubeNumbersValues,]
youtubeNumbers[youtubeNumbers$youtubeNumbersValues >= 1000000,]
youtubeNumbers[youtubeNumbers$youtubeNumbersValues >= 1000000,](youtubeNumbers$youtubeNumbersHeadings)
youtubeNumbers[youtubeNumbers$youtubeNumbersValues >= 1000000,](c(1))
youtubeNumbers[youtubeNumbers$youtubeNumbersValues >= 1000000,]
a <- youtubeNumbers[youtubeNumbers$youtubeNumbersValues >= 1000000,]
a(c(1))
a
a[c(1)]
a <- youtubeNumbers[youtubeNumbers$youtubeNumbersValues >= 1000000,][c(1)]
a <- youtubeNumbers[youtubeNumbers$youtubeNumbersValues >= 1000000,][c(1),]
a
a <- youtubeNumbers[youtubeNumbers$youtubeNumbersValues >= 1000000,][c(1)]
a
source('~/code/mlrcbsousa/pirple/r-toolkit/song.r')
youtubeNumbersInMillionsGreaterThenOneMillionHeadings
library(xlsx)
install.packages("xlsx")
# CSV
ds <- read.csv("MOCK_DATA.csv")
ll
list
getwd()
CSV
#
getwd()
setwd('/home/manuel/code/mlrcbsousa/pirple/r-toolkit')
getwd()
library(xlsx)
read.csv("MOCK_DATA.csv")
ds
# Importing
setwd('/home/manuel/code/mlrcbsousa/pirple/r-toolkit')
ds
# CSV
ds <- read.csv("MOCK_DATA.csv")
ds
?read.csv
# Excel
ds2 <- read.xlsx("MOCK_DATA.xlsx")
# Excel
ds2 <- read.xlsx("MOCK_DATA.xlsx", sheetIndex = "1")
# Excel
ds2 <- read.xlsx("MOCK_DATA.xlsx", sheetIndex = 0)
# Excel
ds2 <- read.xlsx("MOCK_DATA.xlsx", sheetIndex = 1)
ds2
ds3 <- unlist(as.list(ds))
dsmean <- mean(ds3)
dsmean
save(ds, file = "MOCK_DATA.RData")
load("MOCK_DATA.RData")
load("MOCK_DATA.RData")
dsRData <- ds
save(dsRData, file = "MOCK_DATA.RData")
load("MOCK_DATA.RData")
load("MOCK_DATA.RData")
# Tab delimited
ds3 <- read.csv("MOCK_DATA.txt", sep = "\t")
ds3
# scraping web data
library(rvest)
install.packages("rvest")
install.packages("rvest")
install.packages("rvest")
nhl.ds <- nhl.ref %>%
html_nodes(xpath = "") %>%
html_table(fill = T)
url <- "https://www.hockey-reference.com/teams/index.html"
nhl.ref <- read_html(url)
nhl.ds <- nhl.ref %>%
html_nodes(xpath = "") %>%
html_table(fill = T)
library(rvest)
url
nhl.ref <- read_html(url)
View(nhl.ref)
install.packages("dplyr")
nhl.ds <- nhl.ref %>%
html_nodes(xpath = '//*[@id="active_franchises"]') %>%
html_table(fill = T)
nhl.teams <- nhl.ds[[1]][1:5]
View(nhl.teams)
nhl.teams <- nhl.ds[[1]]
View(nhl.teams)
save(nhl.teams, file = "MOCK_DATA.RData")
view(ds)
View(ds)
ds <- read.csv("MOCK_DATA.csv")
View(ds)
ls()
clear
# Internet Users by Country
users <- read.csv('List of Countries by number of Internet Users - Sheet1.csv')
setwd('/home/manuel/code/mlrcbsousa/pirple/r-toolkit/input-output')
users <- read.csv('List of Countries by number of Internet Users - Sheet1.csv')
View(users)
kaggle <- read.csv('Kaggle Datasets.csv')
shoppers <- read.csv('online_shoppers_intention.csv')
View(shoppers)
users
save(users, "exported_internet_users.RData")
save(users, file = "exported_internet_users.RData")
shoppers <- read.csv('online_shoppers_intention.csv')
shoppers
View(shoppers)
load("exported_internet_users.RData")
